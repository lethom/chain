-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on the Nest at
--   <a>https://nest.pijul.com/lthms/chain.hs</a>
@package chain-fs
@version 0.1.0.0

module Control.Monad.Chain.Fs
with :: (FileMode mode, '[AccessError] :| err, MonadIO m) => FilePath -> IOMode -> (Handle mode -> ResultT msg err m a) -> ResultT msg err m a
close :: (MonadIO m) => Handle mode -> ResultT msg err m ()

-- | See <a>openFile</a>
data IOMode :: *
ReadMode :: IOMode
WriteMode :: IOMode
AppendMode :: IOMode
ReadWriteMode :: IOMode
class FileMode mode
open :: (FileMode mode, '[AccessError] :| err, MonadIO m) => FilePath -> IOMode -> ResultT msg err m (Handle mode)
getLine :: (FileMode mode, '[OperationError, EoF] :| err, MonadIO m) => Handle mode -> ResultT msg err m mode
get :: (FileMode mode, '[OperationError] :| err, MonadIO m) => Handle mode -> ResultT msg err m mode
put :: (FileMode mode, '[OperationError] :| err, MonadIO m) => Handle mode -> mode -> ResultT msg err m ()
data Handle mode
stdin :: Handle mode
stdout :: Handle mode
stderr :: Handle mode
class DescriptiveError err
describe :: DescriptiveError err => err -> String
data AccessError
AlreadyInUse :: FilePath -> AccessError
DoesNotExist :: FilePath -> AccessError
AccessDeny :: FilePath -> IOMode -> AccessError
data EoF
EoF :: EoF
data OperationError
IllegalRead :: OperationError
IllegalWrite :: OperationError
FullDevice :: OperationError
instance Control.Monad.Chain.Fs.FileMode Data.Text.Internal.Text
instance Control.Monad.Chain.Fs.FileMode Data.ByteString.Internal.ByteString
instance Control.Monad.Chain.DescriptiveError Control.Monad.Chain.Fs.OperationError
instance Control.Monad.Chain.DescriptiveError Control.Monad.Chain.Fs.EoF
instance Control.Monad.Chain.DescriptiveError Control.Monad.Chain.Fs.AccessError

module Control.Monad.Chain.Console

-- | Write <a>Text</a> to stdout.
echo :: ('[ConsoleError] :| err, MonadIO m) => Text -> ResultT msg err m ()

-- | Write <a>Text</a> to stderr.
log :: ('[ConsoleError] :| err, MonadIO m) => Text -> ResultT msg err m ()

-- | Read one line of <a>Text</a> from stdin.
scan :: ('[ConsoleError] :| err, MonadIO m) => ResultT msg err m Text
data ConsoleError
StdErrError :: ConsoleError
StdOutError :: ConsoleError
StdInError :: ConsoleError
instance Control.Monad.Chain.DescriptiveError Control.Monad.Chain.Console.ConsoleError
